Type Zq = bits
Type G = bits
Type PK = bits
Type MSG = bits
Type CT = bits & bits

Parameter equal : [ bits -> bits -> bits ]

Parameter eta : [ bits ]

Parameter Zstar : [$Zq]

Parameter groupgen : [ [bits] -> $(($bits) & ([bits] -> [bits] -> bits) & ([bits] -> [bits] -> bits) & bits) ]

Definition _ =

bind group = groupgen eta in

let carrier = first (first (first group)) in

let mult = second (first (first group)) in

let power = second (first group) in

let generator = second group in

lethypo DDH = 	
  bind x = Zstar in
  bind y = Zstar in 
  return <power generator x, power generator y, power (power generator x) y>
==
  bind x = Zstar in
  bind y = Zstar in
  bind z = Zstar in 
  return <power generator x, power generator y, power generator z> in

lethypo power_permutation =
  bind x = Zstar in return (power generator x)
==
  carrier in

lethypo mult_permutation (b : G) =
  bind a = carrier in return (mult a b)
==
  carrier in

let keygen =
  bind x = Zstar in
  return <power generator x, x> in

let encrypt =
  func (pk : PK)(m : MSG) ->
    bind y = Zstar in
    return <power generator y, mult (power pk y) m> in

lethypo random_bit_equality (F : $bits) = 
  bind x = F in 
  let b1 = case bits x <B0 nil, <func (x : bits) -> B1 nil, func (x : bits) -> B1 nil>> in
  bind b2 = rand in 
  return (equal b1 b2) 
== 
  rand
in

let semantic_security =
  func (A : PK -> $ ((MSG & MSG) & (CT -> $bits))) ->
    bind pk_sk = keygen in let pk = first pk_sk in let sk = second pk_sk in
    bind m0_m1_A2 = A pk in let m0_m1 = first m0_m1_A2 in let m0 = first m0_m1 in let m1 = second m0_m1 in let A2 = second m0_m1_A2 in
    bind b = rand in
    lethypo mult_permutation_adversary =
      bind x = carrier in return (mult x (if b then m1 else m0))
    ==
      carrier in
    bind c = encrypt pk (if b then m1 else m0) in
    bind b2 = A2 c  in
    let b2' = case bits b2 <B0 nil, <func (x : bits) -> B1 nil, func (x : bits) -> B1 nil>> in
    return (equal b2' b) in

return semantic_security
