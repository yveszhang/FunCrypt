Type PK = bits
Type MSG = bits
Type CT = bits & bits

Parameter equal : [ bits -> bits -> bits ]

Parameter eta : [ bits ]

Parameter Zstar : [ [bits] -> $bits ]
Parameter mult : [ [bits] -> [bits] -> bits ]
Parameter power : [ bits -> [bits] -> bits ]
Parameter generator : [bits]

Definition keygen =
  bind x = Zstar eta in
  return <power generator x, x>

Definition encrypt =
  func (pk : PK)(m : MSG) ->
    bind y = Zstar eta in
    return <power generator y, mult (power pk y) m>

Definition semantic_security =
  func (A : PK -> $ ((MSG & MSG) & (CT -> $bits))) ->
    bind pk_sk = keygen in 
    let pk = first pk_sk in 
    let sk = second pk_sk in
    bind m0_m1_A2 = A pk in 
    let m0_m1 = first m0_m1_A2 in 
    let m0 = first m0_m1 in 
    let m1 = second m0_m1 in 
    let A2 = second m0_m1_A2 in
    bind b = rand in
    bind c = encrypt pk (if b then m1 else m0) in
    bind b2 = A2 c in
    return (equal b2 b)
