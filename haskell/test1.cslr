Parameter y : Bits 
Parameter mod2 : [Bits -> Bits] 
Parameter andb : [[Bits] -> Bits -> Bits] 
Parameter orb : [[Bits] -> Bits -> Bits] 
Parameter xorb : [[Bits] -> Bits -> Bits] 
Parameter  notb : [[Bits] -> Bits] 

Definition add = 
let div2 = func x -> case x <nil, <func (x : Bits) -> x, func (x : Bits) -> x>> in
func l -> srec 
  (func x y c -> mod2 c)
  (func u a x y c ->
    let carry = orb (andb x (orb y c)) (andb (notb x) (andb y c)) in
    case (xorb (xorb x y) c)
      <(B0 (a (div2 x) (div2 y) carry)), 
       <(func u -> B0 (a (div2 x) (div2 y) carry)) i,(func u -> B0 (a (div2 x) (div2 y) carry)) >
      >
  )
  l

